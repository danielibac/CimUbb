package abaqueda.cl.cim_nxt;import android.app.Activity;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.MotionEvent;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.SeekBar;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import android.widget.ToggleButton;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;public class MainActivity extends Activity {    static NXTTalker mNXTTalker;    private static final int REQUEST_ENABLE_BT = 1;//Variable de solicitud de habilitar bluetooth    private static final int REQUEST_CONNECT_DEVICE = 2; //Variable para conectar el dispositivo    private static final int REQUEST_SETTINGS = 3; //Variable de ajustes    public static boolean deshabilitar;    public static final int MESSAGE_TOAST = 1;    public static final int MESSAGE_STATE_CHANGE = 2;    public static int estado;    InputStream mmInStream;//Variable para la entrada de datos    DataOutputStream mmOutStream;    public static final String TOAST = "toast"; // Variable que se ocupa para la notificaci贸n al usuario sin que se pare el proceso    private int mState = NXTTalker.STATE_NONE; //Variable para indicar el estado del robot    private int MotorSeleccionado = 1;    public byte[] salida = new byte[]{(byte) 0, (byte) 0, (byte) 0};    private byte Power = 50; //Variable para la intensidad del motor del robot    private int mSavedState = NXTTalker.STATE_NONE; //Variable inicializada en estado ninguno    private boolean mNewLaunch = true; //Variable para nuevo lanzamiento    private String mDeviceAddress = null; //Variable de la direcci贸n del dispositivo inicializado en nulo    //Variable que contiene el daptador por defecto del dispositivo    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();    //Variable booleana que contiene al adaptador bluetooth si no es nulo(true)    boolean hasBluetooth = !(mBluetoothAdapter == null);    public static byte[] sensores = new byte[1024]; //Variable de tipo byte que almacenaran los sensores    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.main);        //  Variable que contiene el menu y se castea con linearlayout, el cual alinea las vistas        final LinearLayout MenuLayout = (LinearLayout) findViewById(R.id.menuLayout); //Menu superior        // Variables de tipo final que se castean con relativelayout el cual es el por defecto en android        final RelativeLayout LinkLayout = (RelativeLayout) findViewById(R.id.linkLayout); //Panel link para iniciar la conexi贸n        final RelativeLayout MotorLayout = (RelativeLayout) findViewById(R.id.motorLayout); //Panel motores        final RelativeLayout SensorLayout = (RelativeLayout) findViewById(R.id.sensorLayout); //Panel sensores        final RelativeLayout EjecucionLayout = (RelativeLayout) findViewById(R.id.ejecucionLayout); //Panel Ejecucion        final RelativeLayout ConfigureLayout = (RelativeLayout) findViewById(R.id.configureLayout); //Panel Ejecucion        //Indica que menu y link se vean de forma predeterminada al entrar a la aplicaci贸n con VISIBLE y motor y sensor no ocurre eso        MenuLayout.setVisibility(View.VISIBLE);        LinkLayout.setVisibility(View.VISIBLE);        MotorLayout.setVisibility(View.INVISIBLE);        SensorLayout.setVisibility(View.INVISIBLE);        EjecucionLayout.setVisibility(View.INVISIBLE);        ConfigureLayout.setVisibility(View.INVISIBLE);        //Panel link (forma grafica)        final ToggleButton Bluetooth = (ToggleButton) findViewById(R.id.bluetooth);        final ToggleButton Habilitar = (ToggleButton) findViewById(R.id.habilitar);        final Button Tiempo_adelante = (Button) findViewById(R.id.tiempo_adelante);        final Button Rotacion_adelante = (Button) findViewById(R.id.rotacion_adelante);        final Button Tiempo_atras = (Button) findViewById(R.id.tiempo_atras);        final Button Rotacion_atras = (Button) findViewById(R.id.rotacion_atras);        final Button Reaccion_10cm = (Button) findViewById(R.id.reaccion_10cm);        final Button Reaccion_15cm = (Button) findViewById(R.id.reaccion_15cm);        final Button Reaccion_20cm = (Button) findViewById(R.id.reaccion_20cm);        final Button Reaccion_25cm = (Button) findViewById(R.id.reaccion_25cm);        final Button Capturar_linea = (Button) findViewById(R.id.capturar_linea);        final Button Capturar_fondo = (Button) findViewById(R.id.capturar_fondo);        final TextView Text_linea = (TextView) findViewById(R.id.text_linea);        final TextView Text_fondo = (TextView) findViewById(R.id.text_fondo);        final Button Line_Follower = (Button) findViewById(R.id.line_follower);        final Button Configure = (Button) findViewById(R.id.configure);        //Text_linea.setEnabled(false);        //Text_fondo.setEnabled(false);        Text_linea.setText("0");        Text_fondo.setText("0");        Bluetooth.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                //Si hasbluetooth es falso, corresponde que no pudo encontrar el bluetooth por defecto                if (!hasBluetooth)                    Toast.makeText(getApplicationContext(), "Bluetooth not supported", Toast.LENGTH_LONG).show();                if (Bluetooth.isChecked()) {                    // Si el bluetooth existe pero el adaptador no esta habilitado, se le pide al usuario que lo habilite                    if (hasBluetooth && !mBluetoothAdapter.isEnabled()) {                        Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);                        startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);                        Toast.makeText(getApplicationContext(), "Bluetooth turned on", Toast.LENGTH_LONG).show();                    } else {                        if (hasBluetooth && mBluetoothAdapter.isEnabled()) {                            if (mSavedState == NXTTalker.STATE_CONNECTED) {                                BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(mDeviceAddress);                                mNXTTalker.connect(device);                            } else {                                if (mNewLaunch) {                                    mNewLaunch = false;                                    startConnection();                                }                            }                            Toast.makeText(getApplicationContext(), "Bluetooth turned off", Toast.LENGTH_LONG).show();                        }                    }                }                mNXTTalker.stop();            }        });        Capturar_linea.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                sensores = mNXTTalker.buffer;                int valor=Integer.parseInt(Byte.toString(sensores[9]));                Text_linea.setText(String.valueOf(valor));            }        });        Capturar_fondo.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                sensores = mNXTTalker.buffer;                int valor=Integer.parseInt(Byte.toString(sensores[10]));                Text_fondo.setText(String.valueOf(valor));            }        });        Habilitar.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                if (Habilitar.isChecked()) {                    // Si el bluetooth existe pero el adaptador no esta habilitado, se le pide al usuario que lo habilite                    if (hasBluetooth && !mBluetoothAdapter.isEnabled()) {                        Toast.makeText(getApplicationContext(), "Intente conectarse primero", Toast.LENGTH_LONG).show();                    } else {                        if (hasBluetooth && mBluetoothAdapter.isEnabled() && (NXTTalker.mState == NXTTalker.STATE_CONNECTED)) {                            //mNXTTalker.motors3();                            // mNXTTalker.write2(bufferSalida);                            estado = 0;                            salida[0] = 100;                            mNXTTalker.deshabilitar();                            deshabilitar = true;                        }                    }                }                if (!Habilitar.isChecked()) {                    // Si el bluetooth existe pero el adaptador no esta habilitado, se le pide al usuario que lo habilite                    if (hasBluetooth && !mBluetoothAdapter.isEnabled()) {                        Toast.makeText(getApplicationContext(), "Intente conectarse primero", Toast.LENGTH_LONG).show();                    } else {                        if (hasBluetooth && mBluetoothAdapter.isEnabled() && (NXTTalker.mState == NXTTalker.STATE_CONNECTED)) {                            estado = 1;                            deshabilitar = false;                            mNXTTalker.habilitar();                        }                    }                }            }        });        Tiempo_adelante.setOnClickListener(new View.OnClickListener() {                                               public void onClick(View v) {                                                   mNXTTalker.tiempo_adelante_empezar();                                                   try {                                                       Thread.sleep(4000);                                                   } catch (InterruptedException e) {                                                       e.printStackTrace();                                                   }                                                   mNXTTalker.tiempo_parar();                                               }                                           }        );        Rotacion_adelante.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                mNXTTalker.rotacion_adelante();            }        });        Rotacion_atras.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                mNXTTalker.rotacion_atras();            }        });        Tiempo_atras.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                mNXTTalker.tiempo_atras_empezar();                try {                    Thread.sleep(4000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                mNXTTalker.tiempo_parar();            }        });        Reaccion_10cm.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                boolean dale = true;                int distancia, estados;                mNXTTalker.solo_andar();                while (dale) {                    sensores = mNXTTalker.buffer;                    if (sensores[7] == -1) {                    } else {                        distancia = Integer.parseInt(Byte.toString(sensores[7]));                        if (distancia > 0 && distancia <= 10) {                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.reaccion_10cm();                            try {                                Thread.sleep(2500);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.rotacion_adelante();                            dale = false;                        }                    }                }            }        });        Reaccion_15cm.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                boolean dale = true;                int distancia, estados;                mNXTTalker.solo_andar();                while (dale) {                    sensores = mNXTTalker.buffer;                    if (sensores[7] == -1) {                    } else {                        distancia = Integer.parseInt(Byte.toString(sensores[7]));                        if (distancia > 10 && distancia <= 15) {                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.rotacion_atras();                            try {                                Thread.sleep(5500);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.reaccion_15cm();                            dale = false;                        }                    }                }            }        });        Reaccion_20cm.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                boolean dale = true;                int distancia, estados;                mNXTTalker.solo_andar();                while (dale) {                    sensores = mNXTTalker.buffer;                    if (sensores[7] == -1) {                    } else {                        distancia = Integer.parseInt(Byte.toString(sensores[7]));                        if (distancia > 15 && distancia <= 20) {                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.reaccion_20cm();                            try {                                Thread.sleep(8500);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.rotacion_atras();                            dale = false;                        }                    }                }            }        });        Reaccion_25cm.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                boolean dale = true;                int distancia, estados;                mNXTTalker.solo_andar();                while (dale) {                    sensores = mNXTTalker.buffer;                    if (sensores[7] == -1) {                    }else {                        distancia = Integer.parseInt(Byte.toString(sensores[7]));                        if (distancia > 20 && distancia <= 25) {                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.rotacion_adelante();                            try {                                Thread.sleep(5500);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.tiempo_parar();                            try {                                Thread.sleep(200);                            } catch (InterruptedException e) {                                e.printStackTrace();                            }                            mNXTTalker.reaccion_25cm();                            dale = false;                        }                    }                }            }        });        Line_Follower.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                int posicion_linea =Integer.parseInt(Text_linea.getText().toString());                int posicion_fondo =Integer.parseInt(Text_fondo.getText().toString());                int luz1, luz2, luz3;                mNXTTalker.solo_andar_luz();                while (true) {                    //                    sensores = mNXTTalker.buffer;                    luz1 = Integer.parseInt(Byte.toString(sensores[8]));//Luz derecha                    luz2 = Integer.parseInt(Byte.toString(sensores[9]));//Luz Central                    luz3 = Integer.parseInt(Byte.toString(sensores[10]));//Luz izquierda                    if ((luz2 > (posicion_linea-5) && luz2 < (posicion_linea+5)) && (luz1 > (posicion_linea-5) && luz1 < (posicion_linea+5)) && (luz3 > (posicion_linea-5) && luz3 < (posicion_linea+5))) {                        mNXTTalker.tiempo_parar();                        break;                    } else {                        if ((luz2> (posicion_linea-5) && luz2<(posicion_linea+5))&& (luz1>(posicion_fondo-5) && luz1<(posicion_fondo+5)) && (luz3>(posicion_fondo-5) && luz3 <(posicion_fondo+5))) {                            //solo andar                            mNXTTalker.solo_andar_luz();                        } else {                            if ((luz1>(posicion_linea-3) && luz1 <(posicion_linea +3)) && (luz2 >(posicion_fondo-3) && luz2 <(posicion_fondo+3))) {// luz derecha es luz1                                while ((Integer.parseInt(Byte.toString(sensores[9]))<posicion_linea + 3) && (Integer.parseInt(Byte.toString(sensores[9])) > posicion_linea - 3)) {                                    mNXTTalker.tiempo_parar();                                    try {                                        Thread.sleep(200);                                    } catch (InterruptedException e) {                                        e.printStackTrace();                                    }                                    mNXTTalker.luz_derecha();                                    try {                                        Thread.sleep(500);                                    } catch (InterruptedException e) {                                        e.printStackTrace();                                    }                                }                            } else {                                if ((luz3>(posicion_linea-3) && luz3<(posicion_linea+3)) && (luz2 >(posicion_fondo-3) && luz2<(posicion_fondo+3))) {//luz izquierda es luz3                                    while ((Integer.parseInt(Byte.toString(sensores[9])) <(posicion_linea+3)) && (Integer.parseInt(Byte.toString(sensores[9]))>(posicion_linea-3))) {                                        mNXTTalker.tiempo_parar();                                        //luz2 = Integer.parseInt(Byte.toString(sensores[9]));//Luz Central                                        try {                                            Thread.sleep(300);                                        } catch (InterruptedException e) {                                            e.printStackTrace();                                        }                                        mNXTTalker.luz_izquierda();                                        try {                                            Thread.sleep(500);                                        } catch (InterruptedException e) {                                            e.printStackTrace();                                        }                                    }                                }                            }if((luz2 >(posicion_fondo-5) && luz2 <(posicion_fondo+5)) && (luz1 >(posicion_fondo-5) && luz1 <(posicion_fondo+5)) && (luz3 >(posicion_fondo-5) && luz3 <(posicion_fondo+5))){                                while ((Integer.parseInt(Byte.toString(sensores[9]))<(posicion_linea+3)) && (luz2>(posicion_linea-3))) {                                    mNXTTalker.tiempo_parar();                                    //luz2 = Integer.parseInt(Byte.toString(sensores[9]));//Luz Central                                    try {                                        Thread.sleep(300);                                    } catch (InterruptedException e) {                                        e.printStackTrace();                                    }                                    mNXTTalker.luz_izquierda();                                    try {                                        Thread.sleep(500);                                    } catch (InterruptedException e) {                                        e.printStackTrace();                                    }                                }                            }                        }                    }                }            }        });        //Panel  de los motores        final Button MotorR = (Button) findViewById(R.id.motorR); //Avanzar motor seleccionado R        final Button MotorL = (Button) findViewById(R.id.motorL); //Retroceder motor seleccinado L        final Button Motor1c = (Button) findViewById(R.id.motor1); //Cambiar al motor 1        final Button Motor2c = (Button) findViewById(R.id.motor2); //Cambiar al motor 2        final Button Motor3c = (Button) findViewById(R.id.motor3); //Cambiar al motor 3        Motor1c.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MotorSeleccionado = 1;            }        });        Motor2c.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MotorSeleccionado = 2;            }        });        Motor3c.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MotorSeleccionado = 3;            }        });        MotorR.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                switch (event.getAction()) {                    case MotionEvent.ACTION_DOWN:                        switch (MotorSeleccionado) {                            case 1:                                moverMotores((byte) 1, (byte) 0, (byte) 0);                                break;                            case 2:                                moverMotores((byte) 0, (byte) 1, (byte) 0);                                //  mNXTTalker.limite((byte) 0, (byte) 50, (byte) 0,false,false);                                break;                            case 3:                                moverMotores((byte) 0, (byte) 0, (byte) 1);                                break;                        }                        return true;                    case MotionEvent.ACTION_UP:                        moverMotores((byte) 0, (byte) 0, (byte) 0);                        return true;                }                return false;            }        });        MotorL.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                switch (event.getAction()) {                    case MotionEvent.ACTION_DOWN:                        switch (MotorSeleccionado) {                            case 1:                                moverMotores((byte) -1, (byte) 0, (byte) 0);                                break;                            case 2:                                moverMotores((byte) 0, (byte) -1, (byte) 0);                                // mNXTTalker.limite((byte) 0, (byte) 30, (byte) 0,false,false);                                break;                            case 3:                                moverMotores((byte) 0, (byte) 0, (byte) -1);                                break;                        }                        return true;                    case MotionEvent.ACTION_UP:                        moverMotores((byte) 0, (byte) 0, (byte) 0);                        return true;                }                return false;            }        });        //Barra de intensidad del motor del robot        SeekBar powerSeekBar = (SeekBar) findViewById(R.id.power);        powerSeekBar.setProgress(Power);        powerSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            @Override            public void onProgressChanged(SeekBar seekBar, int progress,                                          boolean fromUser) {                Power = (byte) progress;            }            @Override            public void onStartTrackingTouch(SeekBar seekBar) {            }            @Override            public void onStopTrackingTouch(SeekBar seekBar) {            }        });        //Panel Sensores        final TextView datosSensor1 = (TextView) findViewById(R.id.sensor1); //Datos del sensor 1: lightSensor1        final TextView datosSensor2 = (TextView) findViewById(R.id.sensor2); //Datos del sensor 2: lightSensor2        final TextView datosSensor3 = (TextView) findViewById(R.id.sensor3); //Datos del sensor 3: ultrasonido        final TextView datosSensor4 = (TextView) findViewById(R.id.sensor4); //Datos del sensor 4: lightSensor3        final TextView instrucciones = (TextView) findViewById(R.id.instrucciones); //Sugiere abrir el programa del robot        if (savedInstanceState != null) {            mNewLaunch = false;            mDeviceAddress = savedInstanceState.getString("device_address");            if (mDeviceAddress != null) {                mSavedState = NXTTalker.STATE_CONNECTED;            }        }        //Menu superior        final Button Link = (Button) findViewById(R.id.sLink);        final Button Motores = (Button) findViewById(R.id.sMotores);        final Button Sensores = (Button) findViewById(R.id.sSensores);        final Button Ejecucion = (Button) findViewById(R.id.Ejecucion);        Link.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MenuLayout.setVisibility(View.VISIBLE);                LinkLayout.setVisibility(View.VISIBLE);                MotorLayout.setVisibility(View.INVISIBLE);                SensorLayout.setVisibility(View.INVISIBLE);                EjecucionLayout.setVisibility(View.INVISIBLE);                ConfigureLayout.setVisibility(View.INVISIBLE);            }        });        Motores.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MenuLayout.setVisibility(View.VISIBLE);                LinkLayout.setVisibility(View.INVISIBLE);                MotorLayout.setVisibility(View.VISIBLE);                SensorLayout.setVisibility(View.INVISIBLE);                EjecucionLayout.setVisibility(View.INVISIBLE);                ConfigureLayout.setVisibility(View.INVISIBLE);            }        });        Ejecucion.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MenuLayout.setVisibility(View.VISIBLE);                LinkLayout.setVisibility(View.INVISIBLE);                MotorLayout.setVisibility(View.INVISIBLE);                SensorLayout.setVisibility(View.INVISIBLE);                EjecucionLayout.setVisibility(View.VISIBLE);                ConfigureLayout.setVisibility(View.INVISIBLE);            }        });        Configure.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MenuLayout.setVisibility(View.VISIBLE);                LinkLayout.setVisibility(View.INVISIBLE);                MotorLayout.setVisibility(View.INVISIBLE);                SensorLayout.setVisibility(View.INVISIBLE);                EjecucionLayout.setVisibility(View.INVISIBLE);                ConfigureLayout.setVisibility(View.VISIBLE);            }        });        Sensores.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                MenuLayout.setVisibility(View.VISIBLE);                LinkLayout.setVisibility(View.INVISIBLE);                MotorLayout.setVisibility(View.INVISIBLE);                SensorLayout.setVisibility(View.VISIBLE);                EjecucionLayout.setVisibility(View.INVISIBLE);                ConfigureLayout.setVisibility(View.INVISIBLE);                datosSensor1.setTextColor(0xff0000cc);                datosSensor2.setTextColor(0xff0000cc);                datosSensor3.setTextColor(0xff0000cc);                datosSensor4.setTextColor(0xff0000cc);                // Hace que los datos recibidos se muestren de manera constante(loop)                final Handler handler = new Handler();                handler.post(new Runnable() {                    @Override                    public void run() {                        // upadte textView here                        sensores = mNXTTalker.buffer;                        if (sensores[0] != 0) {                            instrucciones.setVisibility(View.INVISIBLE);                        } else {                            instrucciones.setVisibility(View.VISIBLE);                        }                        /*                        if ((sensores[6]) == -1) {                            datosSensor2.setTextColor(0xffff0000);                            datosSensor2.setText("Dato incorreto");                        } else {                            datosSensor1.setText(Byte.toString(sensores[6]));                        }*/                        if (deshabilitar) {                            //sensores[7]=0;                            datosSensor1.setText("0 cm");                        } else {                            if ((sensores[7]) == -1) {                                datosSensor1.setTextColor(0xffff0000);                                datosSensor1.setText("Dato incorreto");                            } else {                                int distancia;                                distancia = Integer.parseInt(Byte.toString(sensores[7]));                                //Byte.toString(sensores[7])                                datosSensor1.setText(distancia + " cm");                            }                        }                        //datosSensor3.setText("R: " + Byte.toString(sensores[8]) + " |   G: " + Byte.toString(sensores[9]) + " |   B: " + Byte.toString(sensores[10]));                        if (deshabilitar) {                            datosSensor2.setText("0 lux");                            datosSensor3.setText("0 lux");                            datosSensor4.setText("0 lux");                        } else {                            datosSensor2.setText(Byte.toString(sensores[8]) + " lux");                            datosSensor3.setText(Byte.toString(sensores[9]) + " lux");                            datosSensor4.setText(Byte.toString(sensores[10]) + " lux");                        }                        handler.postDelayed(this, 200); // set time here to refresh textView                    }                });            }        });        mNXTTalker = new NXTTalker(mHandler);    }    private final Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case MESSAGE_TOAST:                    Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST), Toast.LENGTH_SHORT).show();                    break;                case MESSAGE_STATE_CHANGE:                    mState = msg.arg1;                    break;            }        }    };    //M茅todo que intenta la conexion con un dispositivo    private void startConnection() {        Intent intent = new Intent(this, SearchDeviceActivity.class);        startActivityForResult(intent, REQUEST_CONNECT_DEVICE);    }    //Metodo para mover los motores dependiendo de la intensidad("power") que tenga    public void moverMotores(byte a, byte b, byte c) {        a = (byte) (Power * a);        b = (byte) (Power * b);        c = (byte) (Power * c);        mNXTTalker.motors3(a, b, c, false, false);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        switch (requestCode) {            case REQUEST_ENABLE_BT:                if (resultCode == Activity.RESULT_OK) {                    startConnection();                } else {                    Toast.makeText(this, "Bluetooth not enabled, exiting.", Toast.LENGTH_LONG).show();                    finish();                }                break;            case REQUEST_CONNECT_DEVICE:                if (resultCode == Activity.RESULT_OK) {                    String address = data.getExtras().getString(SearchDeviceActivity.EXTRA_DEVICE_ADDRESS);                    BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);                    mDeviceAddress = address;                    mNXTTalker.connect(device);                }                break;            case REQUEST_SETTINGS:                //XXX?                break;        }    }    @Override    protected void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        if (mState == NXTTalker.STATE_CONNECTED) {            outState.putString("device_address", mDeviceAddress);        }    }}